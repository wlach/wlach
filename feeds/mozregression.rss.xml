<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>William Lachance's Log: Posts tagged 'mozregression'</title>
  <description>William Lachance's Log: Posts tagged 'mozregression'</description>
  <link>https://wlach.github.io/tags/mozregression.html</link>
  <lastBuildDate>Mon, 16 Sep 2019 15:29:04 UT</lastBuildDate>
  <pubDate>Mon, 16 Sep 2019 15:29:04 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>mozregression update: python 3 edition</title>
   <link>https://wlach.github.io/blog/2019/09/mozregression-update-python-3-edition?utm_source=mozregression&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wlach-github-io:-blog-2019-09-mozregression-update-python-3-edition</guid>
   <pubDate>Mon, 16 Sep 2019 15:29:04 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;For those who are still wondering, yup, I am still maintaining &lt;a href="https://mozilla.github.io/mozregression/"&gt;mozregression&lt;/a&gt;, though increasingly reluctantly. Given how important this project is to the development of Firefox (getting a regression window using mozregression is standard operating procedure whenever a new bug is reported in Firefox), it feels like this project is pretty vital, so I continue out of some sense of obligation &amp;mdash; but really, someone more interested in Mozilla&amp;rsquo;a build, automation and testing systems would be better suited to this task: over the past few years, my interests/focus have shifted away from this area to building up Mozilla&amp;rsquo;s data storage and visualization platform.&lt;/p&gt;

&lt;p&gt;This post will describe some of the things that have happened in the last year and where I see the project going. My hope is to attract some new blood to add some needed features to the project and maybe take on some of the maintainership duties.&lt;/p&gt;

&lt;h2 id="python-3"&gt;python 3&lt;/h2&gt;

&lt;p&gt;The most important update is that, as of today, the command-line version of mozregression (v3.0.1) should work with python 3.5+. &lt;a href="https://python-modernize.readthedocs.io/en/latest/"&gt;modernize&lt;/a&gt; did most of the work for us, though there were some unit tests that needed updating: special thanks to &lt;a href="https://github.com/gloomy-ghost"&gt;@gloomy-ghost&lt;/a&gt; for helping with that.&lt;/p&gt;

&lt;p&gt;For now, we will continue to support python 2.7 in parallel, mainly because the GUI has not yet been ported to python 3 (more on that later) and we have CI to make sure it doesn&amp;rsquo;t break.&lt;/p&gt;

&lt;h2 id="other-updates"&gt;other updates&lt;/h2&gt;

&lt;p&gt;The last year has mostly been one of maintenance. Thanks in particular to Ian Moody (:kwan) for his work throughout the year &amp;mdash; including patches to adapt mozregression support to our new updates policy and shippable builds (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1532412"&gt;bug 1532412&lt;/a&gt;), and Kartikaya Gupta (:kats) for adding support for bisecting the GeckoView example app (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1507225"&gt;bug 1507225&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id="future-work"&gt;future work&lt;/h2&gt;

&lt;p&gt;There are a bunch of things I see us wanting to add or change with mozregression over the next year or so. I might get to some of these if I have some spare cycles, but probably best not to count on it:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Port the mozregression GUI to Python 3 (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1581633"&gt;bug  1581633&lt;/a&gt;) As mentioned  above, the command-line client works with python 3, but we have yet to port  the &lt;a href=""&gt;GUI&lt;/a&gt;. We should do that. This probably also entails porting the GUI to  use PyQT5 (which is pip-installable and thus much easier to integrate into a  CI process), see &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1426766"&gt;bug 1426766&lt;/a&gt;.&lt;/li&gt;
 &lt;li&gt;Make self-contained GUI builds available for MacOS X (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1425105"&gt;bug  1425105&lt;/a&gt;) and Linux  (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1581643"&gt;bug 1581643&lt;/a&gt;).&lt;/li&gt;
 &lt;li&gt;Improve our mechanism for producing a standalone version of the GUI in  general. We&amp;rsquo;ve used &lt;a href="https://github.com/anthony-tuininga/cx_Freeze"&gt;cx_Freeze&lt;/a&gt;  which mostly works ok, but has a number of problems (e.g. it pulls in a bunch of unnecessary dependencies, which  bloats the size of the installer). Upgrading the GUI to use python 3 may  alleviate some of these issues, but it might be worth considering other  options in this space, like Gregory Szorc&amp;rsquo;s &lt;a href="https://github.com/indygreg/PyOxidizer"&gt;pyoxidizer&lt;/a&gt;.&lt;/li&gt;
 &lt;li&gt;Add some kind of telemetry to mozregression to measure usage of this tool  (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1581647"&gt;bug 1581647&lt;/a&gt;).  My anecdotal experience is that this tool is pretty invaluable for Firefox  development and QA, but this is not immediately apparent to Mozilla&amp;rsquo;s  leadership and it&amp;rsquo;s thus very difficult to convince people to spend their  cycles on maintaining and improving this tool. Field data may help change  that story.&lt;/li&gt;
 &lt;li&gt;Supporting new Mozilla products which aren&amp;rsquo;t built (entirely) out of mozilla-central,  most especially Fenix (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1556042"&gt;bug 1556042&lt;/a&gt;)  and Firefox Reality (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1568488"&gt;bug 1568488&lt;/a&gt;).  This is probably rather involved (mozregression has a big pile of assumptions about how  the builds it pulls down are stored and organized) but that doesn&amp;rsquo;t mean that  this work isn&amp;rsquo;t necessary.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;re interested in working on any of the above, please feel free to dive in on one of the above bugs. I can&amp;rsquo;t offer formal mentorship, but am happy to help out where I can.&lt;/p&gt;</description></item>
  <item>
   <title>mozregression's new mascot</title>
   <link>https://wlach.github.io/blog/2017/07/mozregression-s-new-mascot?utm_source=mozregression&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wlach-github-io:-blog-2017-07-mozregression-s-new-mascot</guid>
   <pubDate>Mon, 31 Jul 2017 15:32:02 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Spent a few hours this morning on a few housekeeping issues with &lt;a href="https://mozilla.github.io/mozregression"&gt;mozregression&lt;/a&gt;. The web site was badly in need of an update (it was full of references to obsolete stuff like B2G and codefirefox.com) and the usual pile of fixes motivated a new release of the actual software. But most importantly, mozregression now has a proper application icon / logo, thanks to Victoria Wang!&lt;/p&gt;

&lt;p&gt;&lt;img src="/files/2017/07/mozregressionicon3.png" /&gt;&lt;/p&gt;

&lt;p&gt;One of the nice parts about working at Mozilla is the flexibility it offers to just hack on stuff that&amp;rsquo;s important, whether or not it&amp;rsquo;s part of your formal job description. Maintaining mozregression is pretty far outside my current set of responsibilities (or even interests), but I keep it going because it&amp;rsquo;s a key tool used by developers team here and no one else seems willing to take it over. Fortunately, tools like appveyor and pypi keep the time suckage to a mostly-reasonable level.&lt;/p&gt;</description></item>
  <item>
   <title>mozregression updates</title>
   <link>https://wlach.github.io/blog/2015/01/mozregression-updates?utm_source=mozregression&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wlach-github-io:-blog-2015-01-mozregression-updates</guid>
   <pubDate>Tue, 27 Jan 2015 05:00:00 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Lots of movement in &lt;a href="http://mozilla.github.io/mozregression"&gt;mozregression&lt;/a&gt; (a tool for automatically determining when a regression was introduced in Firefox by bisecting builds on ftp.mozilla.org) in the last few months. Here&amp;#8217;s some highlights:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Support for win64 nightly and inbound builds (Kapil Singh, Vaibhav Agarwal)&lt;/li&gt;
 &lt;li&gt;Support for using an http cache to reduce time spent downloading builds (Sam Garrett)&lt;/li&gt;
 &lt;li&gt;Way better logging and printing of remaining time to finish bisection (Julien Pag√®s)&lt;/li&gt;
 &lt;li&gt;Much improved performance when bisecting inbound (Julien)&lt;/li&gt;
 &lt;li&gt;Support for automatic determination on whether a build is good/bad via a custom script (Julien)&lt;/li&gt;
 &lt;li&gt;Tons of bug fixes and other robustness improvements (me, Sam, Julien, others&amp;#8230;)&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Also thanks to Julien, we have a &lt;a href="http://mozilla.github.io/mozregression/"&gt;spiffy new website&lt;/a&gt; which documents many of these features. If it&amp;#8217;s been a while, be sure to &lt;a href="http://mozilla.github.io/mozregression/install.html"&gt;update your copy of mozregression to the latest version&lt;/a&gt; and check out the site for documentation on how to use the new features described above!&lt;/p&gt;

&lt;p&gt;Thanks to everyone involved (especially Julien) for all the hard work. Hopefully the payoff will be a tool that&amp;#8217;s just that much more useful to Firefox contributors everywhere.&lt;/p&gt;</description></item>
  <item>
   <title>mozregression 0.24</title>
   <link>https://wlach.github.io/blog/2014/09/mozregression-0-24?utm_source=mozregression&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wlach-github-io:-blog-2014-09-mozregression-0-24</guid>
   <pubDate>Mon, 15 Sep 2014 04:00:00 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;I just released &lt;a href="http://mozilla.github.io/mozregression/"&gt;mozregression&lt;/a&gt; 0.24. This would be a good time to note some of the user-visible fixes / additions that have gone in recently:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;Thanks to Sam Garrett, you can now specify a different branch other than inbound to get finer grained regression ranges from. E.g. if you&amp;#8217;re pretty sure a regression occurred on fx-team, you can do something like:   &lt;code&gt;mozregression --inbound-branch fx-team -g 2014-09-13 -b 2014-09-14&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;Fixed a bug where we could get an incorrect regression range (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1059856"&gt;bug 1059856&lt;/a&gt;). Unfortunately the root cause of the bug is still open (it&amp;#8217;s a bit tricky to match mozilla-central commits to that of other branches) but I think this most recent fix should make things work in 99.9% of cases. Let me know if I&amp;#8217;m wrong.&lt;/li&gt;
 &lt;li&gt;Thanks to Julien Pag√®s, we now download the inbound build metadata in parallel, which speeds up inbound bisection quite significantly&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;If you know a bit of python, contributing to mozregression is a great way to have a high impact on Mozilla. Many platform developers use this project in their day-to-day work, but there&amp;#8217;s still &lt;a href="https://bugzilla.mozilla.org/buglist.cgi?component=mozregression&amp;amp;#038;product=Testing"&gt;lots of room for improvement&lt;/a&gt;.&lt;/p&gt;</description></item>
  <item>
   <title>mozregression: New maintainer, issues tracked in bugzilla</title>
   <link>https://wlach.github.io/blog/2014/05/mozregression-new-maintainer-issues-tracked-in-bugzilla?utm_source=mozregression&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wlach-github-io:-blog-2014-05-mozregression-new-maintainer-issues-tracked-in-bugzilla</guid>
   <pubDate>Thu, 08 May 2014 04:00:00 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Just wanted to give some quick updates on &lt;a href="http://mozilla.github.io/mozregression/"&gt;mozregression&lt;/a&gt;, your favorite regression-finding tool for Firefox:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;I moved all issue tracking in mozregression to bugzilla from github issues. Github unfortunately doesn&amp;#8217;t really scale to handle notifications sensibly when you&amp;#8217;re part of a large organization like Mozilla, which meant many problems were flying past me unseen. &lt;a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Testing&amp;amp;#038;component=mozregression"&gt;File your new bugs&lt;/a&gt; in bugzilla, they&amp;#8217;re now much more likely to be acted upon.&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://blackrhino.io/"&gt;Sam Garrett&lt;/a&gt; has stepped up to be co-maintainer of the project with me. He&amp;#8217;s been doing a great job whacking out a bunch of bugs and keeping things running reliably, and it was time to give him some recognition and power to keep things moving forward.&lt;/li&gt;
 &lt;li&gt;On that note, I just released mozregression 0.17, which now shows the revision number when running a build (a request from the graphics team, bug &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1007238"&gt;1007238&lt;/a&gt;) and handles respins of nightly builds correctly (&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1000422"&gt;bug 1000422&lt;/a&gt;). Both of these were fixed by Sam.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;If you&amp;#8217;re interested in contributing to Mozilla and are somewhat familiar with python, mozregression is a great place to start. The codebase is quite approachable and the impact will be high &amp;#8212; as I&amp;#8217;ve found out over the last few months, people &lt;em&gt;all over&lt;/em&gt; the Mozilla organization (managers, developers, QA &amp;#8230;) use it in the course of their work and it saves tons of their time. A list of currently open bugs is &lt;a href="https://bugzilla.mozilla.org/buglist.cgi?component=mozregression&amp;amp;#038;product=Testing"&gt;here&lt;/a&gt;.&lt;/p&gt;</description></item>
  <item>
   <title>mozregression now supports inbound builds</title>
   <link>https://wlach.github.io/blog/2013/11/mozregression-now-supports-inbound-builds?utm_source=mozregression&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-wlach-github-io:-blog-2013-11-mozregression-now-supports-inbound-builds</guid>
   <pubDate>Thu, 28 Nov 2013 05:00:00 UT</pubDate>
   <author>William Lachance</author>
   <description>
&lt;p&gt;Just wanted to send out a quick note that I recently added inbound support to &lt;a href="http://mozilla.github.io/mozregression/"&gt;mozregression&lt;/a&gt; for desktop builds of Firefox on Windows, Mac, and Linux.&lt;/p&gt;

&lt;p&gt;For the uninitiated, mozregression is an automated tool that lets you bisect through builds of Firefox to find out when a problem was introduced. You give it the last known good date, the last known bad date and off it will go, automatically pulling down builds to test. After each iteration, it will ask you whether this build was good or bad, update the regression range accordingly, and then the cycle repeats until there are no more intermediate builds.&lt;/p&gt;

&lt;p&gt;Previously, it would only use nightlies which meant a one day granularity &amp;#8212; this meant pretty wide regression ranges, made wider in the last year by the fact that so much more is now going into the tree over the course of the day. However, with inbound support (using the new inbound archive) we now have the potential to get a much tighter range, which should be super helpful for developers. Best of all, mozregression doesn&amp;#8217;t require any particularly advanced skills to use which means everyone in the Mozilla community can help out.&lt;/p&gt;

&lt;p&gt;For anyone interested, there&amp;#8217;s quite a bit of scope to improve mozregression to make it do more things (FirefoxOS support, easier installation&amp;#8230;). Feel free to check out &lt;a href="http://github.com/mozilla/mozregression"&gt;the repository&lt;/a&gt;, the &lt;a href="https://github.com/mozilla/mozregression/issues?state=open"&gt;issues list&lt;/a&gt; (I just added &lt;a href="https://github.com/mozilla/mozregression/issues/76"&gt;an easy one&lt;/a&gt; which would make a great first bug) and ask questions on irc.mozilla.org#ateam!&lt;/p&gt;</description></item></channel></rss>