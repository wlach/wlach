<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">William Lachance's Log: Posts tagged 'Irydium'</title>
 <link rel="self" href="https://wrla.ch/feeds/Irydium.atom.xml" />
 <link href="https://wrla.ch/tags/Irydium.html" />
 <id>urn:https-wrla-ch:-tags-Irydium-html</id>
 <updated>2021-07-05T15:09:56Z</updated>
 <entry>
  <title type="text">Adding persistence to Irydium with Supabase</title>
  <link rel="alternate" href="https://wrla.ch/blog/2021/07/adding-persistence-to-irydium-with-supabase/?utm_source=Irydium&amp;utm_medium=Atom" />
  <id>urn:https-wrla-ch:-blog-2021-07-adding-persistence-to-irydium-with-supabase</id>
  <published>2021-07-05T15:09:56Z</published>
  <updated>2021-07-05T15:09:56Z</updated>
  <author>
   <name>William Lachance</name></author>
  <content type="html">
&lt;p&gt;Entering the second week of &lt;a href="https://recurse.com"&gt;Recurse&lt;/a&gt;. Besides orientation and a few adventures in pair programming (special shout out to &lt;a href="http://universalities.com/"&gt;Jane Adams&lt;/a&gt; for trying out Irydium with me!), I spent most of my time attempting to get document saving &amp;amp; loading working with Irydium.&lt;/p&gt;

&lt;p&gt;I learned from &lt;a href="https://alpha.iodide.io"&gt;Iodide&lt;/a&gt; that not having a good document sharing story really inhibits collaboration and sharing, which is something I explicitly want to do here at the Recurse centre (and in general for this project). That said, this isn&amp;rsquo;t actually an area I want to spend a lot of time on right now: it&amp;rsquo;s the shape of problem I&amp;rsquo;ve solved many times before (and that has been solved by many others). I&amp;rsquo;d rather spend my time over the next few weeks on things I haven&amp;rsquo;t had much of a chance to look at or pursue in my day-to-day.&lt;/p&gt;

&lt;p&gt;So, to try to keep the complexity down, I decided to take the same approach as the &lt;a href="https://svelte.dev/repl"&gt;svelte repl&lt;/a&gt;, which aims only to allow the reproduction of simple examples. It allows you to save anything you type in it and also browse anything that you had previously saved. That&amp;rsquo;s not going to replace GitHub, but it&amp;rsquo;s more than enough to get started.&lt;/p&gt;

&lt;h2 id="supabase"&gt;Supabase&lt;/h2&gt;

&lt;p&gt;So with that goal in mind, how to do go about it? If I wanted to completely fall back on my previous knowledge, I could have gone for the tried + true approach of Django / Heroku to add a persistence layer (what I did for Iodide). That would have had the benefit of being familiar but would also have increased the overall implementation complexity of Irydium considerably. In the past year, I&amp;rsquo;ve become convinced that &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;serverless&lt;/a&gt; approaches to building web applications are the wave of the future, at least for applications like this one. They&amp;rsquo;re easier to set up, easier to develop, and (generally speaking) cheaper to deploy. Just before I launched, I set up &lt;a href="https://irydium.dev"&gt;irydium.dev&lt;/a&gt; as a static site on &lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; and it&amp;rsquo;s been a great experience: deploys are super fast and it&amp;rsquo;s easy to reason about what&amp;rsquo;s going on &amp;ldquo;under the hood&amp;rdquo; (since there&amp;rsquo;s not a much of a hood to look under).&lt;/p&gt;

&lt;p&gt;With that in mind, I decided to take a (small) gamble and give &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; a try for this one after determining it would be compatible with the approach I wanted to take. Supabase bills itself as a &amp;ldquo;Firebase Alternative&amp;rdquo; (&lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; is another popular solution for bootstrapping simple web applications with persistence). In contrast to Firebase, Supabase uses a standard database technologies (Postgres!) and has a nice JavaScript SDK and a bunch of well-written tutorials (including &lt;a href="https://supabase.io/docs/guides/with-svelte"&gt;one especially for Svelte&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The naive model for integrating with Supabase is pretty simple:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Set up a Supabase application, which provides you with a unique API endpoint to make web requests (this endpoint can be exposed publicly).&lt;/li&gt;
 &lt;li&gt;Have your client authenticate with an OAuth provider (e.g. GitHub, GitLab), then store an authentication token in localStorage.&lt;/li&gt;
 &lt;li&gt;You can then make requests to the above endpoint with the authentication token, which lets Supabase use row-level security to restrict modifications to the database: in this case, we can restrict users to updating their own documents.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;d say it probably took me 20&amp;ndash;30 hours to get the feature working end-to-end (including documentation), which wasn&amp;rsquo;t too bad. My impressions were pretty positive: the aforementioned tutorial is pretty decent, the supabase-js library provides a nice ORM-like abstraction over SQL and integrates nicely with Svelte. In general working with Supabase felt pretty familiar to me from previous experiences writing database-backed applications, which I take as a very good sign.&lt;/p&gt;

&lt;p&gt;The part that felt the weirdest was writing raw SQL to set up the &amp;ldquo;documents&amp;rdquo; table that Irydium uses: SQL is something I&amp;rsquo;m fairly used to writing because of my experiences at Mozilla, but I imagine this might be off-putting to someone newer to writing these types of things. Also, I have some concerns of how maintainable a Supabase database is over the long term: while it was easy enough to &lt;a href="https://github.com/irydium/irydium/blob/f816ea6444c94635972a57bc92d7770398117c1e/README.md#working-on-the-site"&gt;document the currently-simple setup instructions in the README&lt;/a&gt;, I do somewhat fear the prospect of managing my database via their SQL console. Something like Django&amp;rsquo;s &lt;a href="https://docs.djangoproject.com/en/3.2/topics/migrations/"&gt;schema migrations&lt;/a&gt; and &lt;a href="https://docs.djangoproject.com/en/3.2/howto/custom-management-commands/"&gt;management commands&lt;/a&gt; would be a welcome addition to Supabase&amp;rsquo;s SDK.&lt;/p&gt;

&lt;h2 id="netlify-functions"&gt;Netlify functions&lt;/h2&gt;

&lt;p&gt;The above approach isn&amp;rsquo;t what most people would consider to be &amp;ldquo;best practice&amp;rdquo;&lt;sup&gt;&lt;a href="#2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-definition" name="2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;. In particular, storing credentials in localStorage is probably not the best idea for an application presenting interactive content like Irydium: it wouldn&amp;rsquo;t be particularly difficult for a malicious document to steal someone&amp;rsquo;s secret and send it somewhere it shouldn&amp;rsquo;t be.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not &lt;em&gt;so&lt;/em&gt; worried about it at this stage of the project, but one intriguing possibility here (that&amp;rsquo;s compatible with our current deploy set up) would be to write some simple &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify Functions&lt;/a&gt; to do the actual interaction with Supabase, while delegating to Netlify for the authentication itself (using &lt;a href="https://docs.netlify.com/visitor-access/identity/"&gt;Netlify Identity&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I experimented writing a simple function to prove out this approach and it seems to work quite well (&lt;a href="https://github.com/irydium/irydium/blob/fecea66a1cd0bedaaab4a3e6502413c55d34ec11/packages/site/netlify_functions/post.js"&gt;source&lt;/a&gt;, &lt;a href="https://irydium.dev/.netlify/functions/post?id=65107940-dd88-11eb-866c-0a4e9a1089db"&gt;example&lt;/a&gt;). This particular function is making an anonymous query to the database, but I see no obstacle to handling authenticated ones as well. Having an API under a &lt;code&gt;.netlify&lt;/code&gt; namespace seems kinda weird on first blush, but I can probably get used to it.&lt;/p&gt;

&lt;p&gt;I want to move on to other things now (parsers! document state visualizations!) but might poke at this more later. In the mean time, if you write/build something cool at &lt;a href="https://irydium.dev/repl"&gt;irydium.dev/repl&lt;/a&gt;, let me know!&lt;/p&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;See, for example, &lt;a href="https://dev.to/rdegges/please-stop-using-local-storage-1i04"&gt;Please Stop Using Local Storage&lt;/a&gt;&amp;nbsp;&lt;a href="#2021-07-05-adding-persistence-to-irydium-with-supabase-footnote-1-return"&gt;â†©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content></entry>
 <entry>
  <title type="text">Irydium: Points of departure</title>
  <link rel="alternate" href="https://wrla.ch/blog/2021/06/irydium-points-of-departure/?utm_source=Irydium&amp;utm_medium=Atom" />
  <id>urn:https-wrla-ch:-blog-2021-06-irydium-points-of-departure</id>
  <published>2021-06-28T16:28:40Z</published>
  <updated>2021-06-28T16:28:40Z</updated>
  <author>
   <name>William Lachance</name></author>
  <content type="html">
&lt;p&gt;So it&amp;rsquo;s my first day at the Recurse centre, which I &lt;a href="/blog/2021/06/mini-sabbatical-and-introducing-irydium/"&gt;blogged briefly about last week&lt;/a&gt;. I thought I&amp;rsquo;d start out by going into a bit more detail about what I&amp;rsquo;m trying to do with &lt;a href="https://github.com/irydium/irydium"&gt;Irydium&lt;/a&gt;. This post might be a bit discursive and some of my thoughts are only half-formed: my intent here is towards trying to &lt;em&gt;express some of these ideas at all&lt;/em&gt; rather than to come up with the perfect formulation for them, which is going to take time. It is based partly on a presentation I gave at Mozilla last Friday (just before going on my 6-week leave, which starts today).&lt;/p&gt;

&lt;h2 id="first-principles"&gt;First principles&lt;/h2&gt;

&lt;p&gt;The premise of Irydium is that despite obvious advances in terms of the ability of computers to crunch numbers and analyze data, our ability to share whatever we learn from these understandings is still far too difficult, especially for people new to the field. Even for domain experts (those with the job title &amp;ldquo;Data Engineer&amp;rdquo; or &amp;ldquo;Data Scientist&amp;rdquo; or similar) this is still more difficult than one would like.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve made a few observations over the past couple years of trying to explain and document Mozilla&amp;rsquo;s data platform that I think form a good starting point for trying to close the gap:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;em&gt;Text is pretty great&lt;/em&gt;.  Writing, just plain text, is (in my opinion) the single best medium for giving context to data.  In terms of raw information density and ability to communicate complex ideas, nothing beats it.  If you haven&amp;rsquo;t read it before, the essay &lt;a href="https://graydon2.dreamwidth.org/193447.html"&gt;always bet on text&lt;/a&gt; (by Graydon Hoare, creator of Rust) is well worth reading.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Markdown is pretty great too&lt;/em&gt;.  Essentially an easy-to-write superset of HTML, it&amp;rsquo;s become the medium of choice for many desktop publishing workflows and has become the basis for many efforts in the &amp;ldquo;interactive presentation&amp;rdquo; space that I&amp;rsquo;m most interested in.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Reactive Systems make Data Exposition Exposition Easier&lt;/em&gt;.  A reactive abstraction in front of your computational model reduces development times, makes your work more reproducible and is often easier for less-experienced people to understand.  I&amp;rsquo;d cite the long-standing success of Excel and the recent interest in projects like Observable as evidence for this.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="ok-so-what-is-irydium"&gt;Ok, so what is Irydium?&lt;/h2&gt;

&lt;p&gt;Irydium is, at heart, a way to translate markdown documents into an interactive, compelling visual presentation.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/files/2021/06/irydium-2.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;My view is that publishing markdown text on the web is very close to a solved problem, and that we should build on that success rather than invent something new. This is not necessarily a new point of view (e.g. &lt;a href="https://rmarkdown.rstudio.com/"&gt;Rmarkdown&lt;/a&gt; and &lt;a href="https://jupyterbook.org/"&gt;JupyterBook&lt;/a&gt; have similar premises) but I think some aspects of Irydium&amp;rsquo;s approach are mildly novel (or at least within the space of &amp;ldquo;not generally accepted ideas&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;If you want to get a bit of a flavor for how it works, visit the demonstration site (&lt;a href="https://irydium.dev"&gt;irydium.dev&lt;/a&gt;) and play with some of the examples.&lt;/p&gt;

&lt;h2 id="what-makes-irydium-different-from-x"&gt;What makes Irydium different from &amp;lt;X&amp;gt;?&lt;/h2&gt;

&lt;p&gt;While there are a bunch of related projects in this space, there&amp;rsquo;s a few design principles about Irydium that make it a little different from most of what&amp;rsquo;s already out there&lt;sup&gt;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-1-definition" name="2021-06-28-irydium-points-of-departure-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;em&gt;Reactive&lt;/em&gt;: Irydium is reactive in the same way that a spreadsheet is &amp;mdash; that is, any individual change you make will immediately flow to the rest of the system.  This provides a more intuitive model for the creator of the document and also makes it easier to create truly interactive visualizations.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Idempotent&lt;/em&gt;: in Irydium, a source document will yield the same presentation every time it&amp;rsquo;s run.  There&amp;rsquo;s no need to reason about what the state of the &amp;ldquo;kernel&amp;rdquo; is.  This is a highly valuable property when thinking about how to make your analyses reproducible.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Familiar&lt;/em&gt;: Irydium uses as few &lt;em&gt;novel&lt;/em&gt; concepts and technologies as possible: it builds on some of the best ideas and technologies produced by the open source community: &lt;a href="https://python.org"&gt;Python&lt;/a&gt;, &lt;a href="https://pyodide.org"&gt;pyodide&lt;/a&gt;, &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;, &lt;a href="https://mdsvex.com"&gt;mdsvex&lt;/a&gt;, &lt;a href="https://myst-parser.readthedocs.io/en/latest/"&gt;MyST&lt;/a&gt; and a few others &amp;mdash; chosen for having a reasonably shallow learning curve.&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Hackable&lt;/em&gt;: While I&amp;rsquo;m working on an online environment to build and share irydium documents, it&amp;rsquo;s also fully possible to do so using the tools you know and love like Visual Studio Code.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="related-projects"&gt;Related projects&lt;/h2&gt;

&lt;p&gt;With the above caveats, there are still a number of projects that overlap with Irydium&amp;rsquo;s ideas and/or design goals. A few that seem worth mentioning here:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://alpha.iodide.io"&gt;Iodide&lt;/a&gt;: This is the obvious one, at least for those who have been following my work for a while.  Iodide was an experiment in making a &amp;ldquo;web native&amp;rdquo; version of a scientific notebook: it uses the cell-based computational model that will be familiar to anyone who&amp;rsquo;s used Jupyter, but all the computation happens on the client.  It is probably most famous for launching &lt;a href="https://pyodide.org"&gt;pyodide&lt;/a&gt;, a port of Python to WebAssembly (that Irydium now uses to support Python).  I feel like it has a number of design issues (some of which I&amp;rsquo;ve &lt;a href="/blog/2020/11/iodide-retrospective/"&gt;blogged about previously&lt;/a&gt;) and is not currently in active development.&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://observablehq.com"&gt;Observable&lt;/a&gt;: Client-side reactive notebooks, commercial backing, broadly used in the D3 community.  Shares Irydium&amp;rsquo;s reactive approach, departs from it in terms of using a custom file format and emphasizing their interactive editing and collaboration environment (which is indeed quite impressive).  I&amp;rsquo;ve used Observable for a few small work things (&lt;a href="https://observablehq.com/@wlach/mozregression-public-usage-dashboard"&gt;example&lt;/a&gt;) and while there&amp;rsquo;s a lot I like about it, I am a bit non-plussed by how many wheels it reinvents and the implicit lock-in to a single vendor.&lt;sup&gt;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-2-definition" name="2021-06-28-irydium-points-of-departure-footnote-2-return"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://starboard.gg"&gt;Starboard&lt;/a&gt;: Similar in some ways to Iodide, but in active development.  I&amp;rsquo;ve started chatting a bit with the core developers on whether there might be areas we could collaborate.&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://ellx.io/"&gt;Ellx&lt;/a&gt;: I found out a bit about this relatively recently, via the Svelte discord.  Actually very close in some ways to Irydium in terms of choices of technology (e.g. &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;).  Again, in initial chats with the core developers on possible collaborations.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="success-criteria"&gt;Success criteria&lt;/h2&gt;

&lt;p&gt;My intent with Irydium, at this point in its development, is to prove out some concepts and see where they lead. While I&amp;rsquo;d welcome it if Irydium became a successful, widely adopted environment for building interactive data visualizations, I&amp;rsquo;d also be totally happy with other outcomes, such as:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Providing a source of ideas and/or code for other people.&lt;/li&gt;
 &lt;li&gt;Working on (or with) Irydium being a good learning experience both for myself and others&lt;/li&gt;&lt;/ol&gt;

&lt;hr /&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2021-06-28-irydium-points-of-departure-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;Please don&amp;rsquo;t conflate &amp;ldquo;unique&amp;rdquo; with &amp;ldquo;superior&amp;rdquo;: I&amp;rsquo;m well aware that all designs come with trade offs.  In particular, Irydium&amp;rsquo;s approach will almost certainly make it difficult / impossible to directly interact with &amp;ldquo;big data&amp;rdquo; systems in an efficient way.&amp;nbsp;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-1-return"&gt;â†©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2021-06-28-irydium-points-of-departure-footnote-2-definition" class="footnote-definition"&gt;
   &lt;p&gt;There is at least one effort (&lt;a href="https://github.com/asg017/dataflow"&gt;Dataflow&lt;/a&gt;) to allow editing Observable documents without using Observable itself, which is interesting.&amp;nbsp;&lt;a href="#2021-06-28-irydium-points-of-departure-footnote-2-return"&gt;â†©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content></entry>
 <entry>
  <title type="text">Mini-sabbatical and introducing Irydium</title>
  <link rel="alternate" href="https://wrla.ch/blog/2021/06/mini-sabbatical-and-introducing-irydium/?utm_source=Irydium&amp;utm_medium=Atom" />
  <id>urn:https-wrla-ch:-blog-2021-06-mini-sabbatical-and-introducing-irydium</id>
  <published>2021-06-23T21:15:15Z</published>
  <updated>2021-06-23T21:15:15Z</updated>
  <author>
   <name>William Lachance</name></author>
  <content type="html">
&lt;p&gt;Approaching my 10-year moz-iversary in July, I&amp;rsquo;ve decided it&amp;rsquo;s time to take a bit of a mini-sabbatical: I&amp;rsquo;ll be out (and trying as hard as possible not to check bugmail) from Friday, June 25th until August 9th. During this time, I&amp;rsquo;ll be doing a batch at the &lt;a href="https://recurse.com"&gt;Recurse Centre&lt;/a&gt; (something like a writer&amp;rsquo;s retreat for programmers), exploring some of my interests around data visualization and analysis that don&amp;rsquo;t quite fit into my role as a Data Engineer here at Mozilla.&lt;/p&gt;

&lt;p&gt;In particular, I&amp;rsquo;m planning to work a bunch on a project tentatively called &amp;ldquo;Irydium&amp;rdquo;, which pursues some of the ideas I &lt;a href="https://wrla.ch/blog/2020/11/iodide-retrospective/"&gt;sketched out last year in my Iodide retrospective&lt;/a&gt; and a few more besides. I&amp;rsquo;ve been steadily working on it in my off hours, but it&amp;rsquo;s become clear that some of the things I want to pursue would benefit from more dedicated attention and the broader perspective that I&amp;rsquo;m hoping the Recurse community will be able to provide.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/files/2021/06/irydium.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;I had meant to write up a proper blog post to announce the project before I left, but it looks like I&amp;rsquo;m pretty much out of time. Instead, I&amp;rsquo;ll just offer up the examples on the newly-minted &lt;a href="https://irydium.dev"&gt;irydium.dev&lt;/a&gt; and invite people to contact me if any of the ideas on the site sounds interesting. I&amp;rsquo;m hoping to blog a whole bunch while I&amp;rsquo;m there, but probably not under the Mozilla tag. Feel free to add wrla.ch to your RSS feed if you want to follow what I&amp;rsquo;m up to!&lt;/p&gt;</content></entry></feed>